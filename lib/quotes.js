// Generated by CoffeeScript 1.9.1
var MOON, QUOTE_MERGE_TIMEOUT, _getByOwnerId, fn, fromMsg, fs, getAuthor, getByNumber, getNextNum, hasSender, hasText, initialized, lastMsg, lastUsersUpdate, logger, misc, msgCache, quotes, saveQuotes;

logger = require('winston');

fs = require('fs');

misc = require('./misc');

msgCache = require('./msg_cache');

exports.QUOTE_MERGE_TIMEOUT = QUOTE_MERGE_TIMEOUT = 200;

quotes = [];

initialized = false;

fn = null;

lastMsg = {};

exports.init = function() {
  var content;
  if (!initialized) {
    fn = __dirname + '/../data/quotes3.txt';
    if (fs.existsSync(fn)) {
      content = fs.readFileSync(fn);
      quotes = JSON.parse(content);
    }
    initialized = true;
  }
};

getNextNum = function() {
  var maxNum;
  if (quotes.length === 0) {
    return 1;
  } else {
    maxNum = Math.max.apply(Math, quotes.map(function(q) {
      return q.num;
    }));
    return maxNum + 1;
  }
};

fromMsg = function(msg) {
  var ref, ref1;
  return {
    id: msg.message_id,
    text: msg.text,
    sender: (ref = (ref1 = msg.forward_from) != null ? ref1.id : void 0) != null ? ref : msg.from.id,
    sender_name: msg.forward_from != null ? misc.fullName(msg.forward_from) : misc.fullName(msg.from),
    chat_id: msg.chat.id,
    date: msg.date
  };
};

exports.add = function(msg, posterId) {
  var date, i, ii, isMatch, j, l, len, len1, n, newQ, num, q, qmsg, quote, quotemsg, ref, ref1;
  if (!initialized) {
    throw new Error("not initialized");
  }
  num = getNextNum();
  date = Date.now();
  quote = {
    num: num,
    version: 4,
    posterId: posterId,
    date: date,
    messages: [fromMsg(msg)]
  };
  if (msg.reply_to_message != null) {
    quote.messages.unshift(fromMsg(msg.reply_to_message));
  }
  ii = -1;
  for (i = l = 0, len = quotes.length; l < len; i = ++l) {
    q = quotes[i];
    if (q.version === 3) {
      isMatch = true;
      ref = q.messages;
      for (j = n = 0, len1 = ref.length; n < len1; j = ++n) {
        qmsg = ref[j];
        quotemsg = quote.messages[j];
        if (!((qmsg.text != null) && qmsg.text === quotemsg.text && qmsg.sender === quotemsg.sender)) {
          isMatch = false;
          break;
        }
      }
      if (isMatch) {
        if (q.messages.length === quote.messages.length) {
          logger.info("Duplicate quote: " + q.num);
          if (q.posterId === posterId) {
            lastMsg[posterId] = {
              date: quote.date,
              quoteNum: q.num
            };
          }
          return q.num;
        }
      }
    }
  }
  if (ii !== -1) {
    quote.num = quotes[ii].num;
    quotes[ii] = quote;
  } else {
    if ((((ref1 = lastMsg[posterId]) != null ? ref1.date : void 0) != null) && date - lastMsg[posterId].date < QUOTE_MERGE_TIMEOUT) {
      newQ = quote;
      quote = getByNumber(lastMsg[posterId].quoteNum);
      quote.date = newQ.date;
      quote.messages = quote.messages.concat(newQ.messages);
    } else {
      quotes.push(quote);
    }
  }
  lastMsg[posterId] = {
    date: quote.date,
    quoteNum: quote.num
  };
  saveQuotes();
  return quote.num;
};

exports.getByNumber = getByNumber = function(num) {
  var q;
  return ((function() {
    var l, len, results;
    results = [];
    for (l = 0, len = quotes.length; l < len; l++) {
      q = quotes[l];
      if (q.num === num) {
        results.push(q);
      }
    }
    return results;
  })())[0];
};

hasText = function(q, lookFor) {
  if ((q.version == null) || q.version < 3) {
    return (q.text != null) && q.text.toLowerCase().indexOf(lookFor) !== -1 || (q.sender_name != null) && q.sender_name.toLowerCase().indexOf(lookFor) !== -1 || (q.saved_name != null) && q.saved_name.toLowerCase().indexOf(lookFor) !== -1 || (q.reply_text != null) && q.reply_text.toLowerCase().indexOf(lookFor) !== -1 || (q.reply_sender_name != null) && q.reply_sender_name.toLowerCase().indexOf(lookFor) !== -1;
  } else {
    return q.messages.some(function(m) {
      return (m.text != null) && m.text.toLowerCase().indexOf(lookFor) !== -1 || (m.sender_name != null) && m.sender_name.toLowerCase().indexOf(lookFor) !== -1 || (m.saved_name != null) && m.saved_name.toLowerCase().indexOf(lookFor) !== -1;
    });
  }
};

exports.getByText = function(text, ownerId) {
  var lookFor, q, qq;
  lookFor = text.toLowerCase();
  qq = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = quotes.length; l < len; l++) {
      q = quotes[l];
      if (hasText(q, lookFor)) {
        results.push(q);
      }
    }
    return results;
  })();
  if (ownerId != null) {
    qq = _getByOwnerId(qq, ownerId);
  }
  return misc.randomChoice(qq);
};

hasSender = function(q, ownerId) {
  if ((q.version == null) || q.version < 3) {
    return q.sender === ownerId || q.reply_sender === ownerId;
  } else {
    return q.messages.some(function(m) {
      return m.sender === ownerId;
    });
  }
};

_getByOwnerId = function(quotes, ownerId) {
  var l, len, q, results;
  results = [];
  for (l = 0, len = quotes.length; l < len; l++) {
    q = quotes[l];
    if (hasSender(q, ownerId)) {
      results.push(q);
    }
  }
  return results;
};

exports.getByOwnerId = function(ownerId) {
  return misc.randomChoice(_getByOwnerId(quotes, ownerId));
};

exports.getRandom = function() {
  return misc.randomChoice(quotes);
};

lastUsersUpdate = null;

exports.updateUsers = function() {
  var l, len, len1, msg, n, quote, ref, updates, user, userName;
  if ((lastUsersUpdate != null) && Date.now() - lastUsersUpdate < 10000) {
    return;
  }
  lastUsersUpdate = Date.now();
  updates = {};
  for (l = 0, len = quotes.length; l < len; l++) {
    quote = quotes[l];
    if ((quote.version == null) || quote.version <= 2) {
      if (quote.sender != null) {
        user = msgCache.getUserById(quote.sender);
        if (user != null) {
          userName = misc.fullName(user);
          if (userName !== quote.sender_name) {
            if (!quote.sender in updates) {
              updates[quote.sender] = true;
              logger.info("Quotes: user " + quote.sender + " changed name to " + userName + ".");
            }
            if (userName === 'Unknown' || userName === '') {
              quote.saved_name = quote.sender_name;
            }
            quote.sender_name = userName;
          }
        }
      }
      if (quote.reply_sender != null) {
        user = msgCache.getUserById(quote.reply_sender);
        if (user != null) {
          userName = misc.fullName(user);
          if (userName !== quote.reply_sender_name) {
            if (!quote.reply_sender in updates) {
              updates[quote.reply_sender] = true;
              logger.info("Quotes: user " + quote.reply_sender + " changed name to " + userName + ".");
            }
            quote.reply_sender_name = userName;
          }
        }
      }
    } else if (quote.version >= 3) {
      ref = quote.messages;
      for (n = 0, len1 = ref.length; n < len1; n++) {
        msg = ref[n];
        if (msg.sender != null) {
          user = msgCache.getUserById(msg.sender);
          if (user != null) {
            userName = misc.fullName(user);
            if (userName !== msg.sender_name) {
              if (!msg.sender in updates) {
                updates[msg.sender] = true;
                logger.info("Quotes: user " + msg.sender + " changed name to " + userName + ".");
              }
              if (userName === 'Unknown' || userName === '') {
                msg.saved_name = quote.sender_name;
              }
              msg.sender_name = userName;
            }
          }
        }
      }
    }
  }
  if (Object.keys(updates).length > 0) {
    saveQuotes();
  }
};

saveQuotes = function() {
  return fs.writeFileSync(fn, JSON.stringify(quotes));
};

exports.importSavedNames = function() {
  var ffn, l, len, len1, mm, n, q, qNew, quotesOld, ref;
  ffn = __dirname + '/../data/quotes2.txt';
  quotesOld = JSON.parse(fs.readFileSync(ffn));
  for (l = 0, len = quotesOld.length; l < len; l++) {
    q = quotesOld[l];
    if (q.sender_name !== '' && q.sender_name !== 'Unknown') {
      qNew = getByNumber(q.num);
      if (qNew != null) {
        if (qNew.version >= 3) {
          ref = qNew.messages;
          for (n = 0, len1 = ref.length; n < len1; n++) {
            mm = ref[n];
            if (mm.sender_name === '' || mm.sender_name === 'Unknown') {
              mm.saved_name = q.sender_name;
            }
          }
        } else {
          if (qNew.sender_name === '' || qNew.sender_name === 'Unknown') {
            qNew.saved_name = q.sender_name;
          }
        }
      }
    }
  }
  saveQuotes();
  return logger.info("Done!");
};

exports.delQuote = function(num) {
  var q;
  quotes = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = quotes.length; l < len; l++) {
      q = quotes[l];
      if (q.num !== num) {
        results.push(q);
      }
    }
    return results;
  })();
  saveQuotes();
};

exports.getByNumberPlus = function(num) {
  var q;
  return misc.randomChoice((function() {
    var l, len, results;
    results = [];
    for (l = 0, len = quotes.length; l < len; l++) {
      q = quotes[l];
      if (q.num >= num) {
        results.push(q);
      }
    }
    return results;
  })());
};

getAuthor = function(q) {
  var msg, ref;
  if ((q.version != null) && q.version >= 3) {
    msg = q.messages[q.messages.length - 1];
  } else {
    msg = q;
  }
  return (ref = msg.saved_name) != null ? ref : msg.sender_name;
};

MOON = String.fromCodePoint(0x1F31D);

exports.getStats = function() {
  var a, authorScore, authorTuples, authors, k, l, len, q, ref, v;
  authors = {};
  for (l = 0, len = quotes.length; l < len; l++) {
    q = quotes[l];
    a = getAuthor(q);
    authors[a] = ((ref = authors[a]) != null ? ref : 0) + 1;
  }
  authorTuples = (function() {
    var results;
    results = [];
    for (k in authors) {
      v = authors[k];
      results.push([k, v]);
    }
    return results;
  })();
  authorTuples.sort(function(arg, arg1) {
    var k1, k2, v1, v2;
    k1 = arg[0], v1 = arg[1];
    k2 = arg1[0], v2 = arg1[1];
    return v2 - v1;
  });
  authorScore = (function() {
    var len1, n, ref1, ref2, results;
    ref1 = authorTuples.slice(0, 5);
    results = [];
    for (n = 0, len1 = ref1.length; n < len1; n++) {
      ref2 = ref1[n], a = ref2[0], v = ref2[1];
      results.push(a + " " + MOON + " " + v + " " + MOON);
    }
    return results;
  })();
  return ("Всего цитат: " + quotes.length + "\n\nTop 5 авторов:\n") + authorScore.join("\n");
};
