// Generated by CoffeeScript 1.9.1
var FFMPEG, child_process, config, convertMp3ToOpus, fs, googleTts, isJap, isKor, isRus, logger, misc, pq, tmp;

child_process = require('child_process');

tmp = require('tmp');

fs = require('fs');

logger = require('winston');

config = require('../lib/config');

pq = require('../lib/promise');

misc = require('../lib/misc');

FFMPEG = config.options.ffmpeg;

isJap = function(c) {
  return (c >= '\u3000' && c <= '\u303f') || (c >= '\u3040' && c <= '\u309f') || (c >= '\u30a0' && c <= '\u30ff') || (c >= '\uff00' && c <= '\uffef') || (c >= '\u4e00' && c <= '\u9faf');
};

isKor = function(c) {
  return (c >= '\u3130' && c <= '\u318f') || (c >= '\uac00' && c <= '\ud7af');
};

isRus = function(c) {
  return c >= 'А' && c <= 'Я' || c >= 'а' && c <= 'я';
};

googleTts = function(txt, lang) {
  return misc.getAsBrowser("https://translate.google.com/translate_tts", {
    qs: {
      ie: 'UTF-8',
      tl: lang,
      q: txt,
      total: 1,
      idx: 0,
      textlen: txt.length,
      client: 't'
    },
    encoding: null
  });
};

convertMp3ToOpus = function(mp3) {
  var args, cmd, df, proc, tmpFile;
  df = new pq.Deferred;
  tmpFile = tmp.fileSync({
    postfix: '.ogg'
  });
  tmpFile.removeCallback();
  tmpFile.removeCallback = function() {
    return fs.unlinkSync(tmpFile.name);
  };
  args = "-v error -i - -acodec libopus \"" + tmpFile.name + "\"";
  cmd = "\"" + FFMPEG + "\" " + args;
  logger.info("Running: " + cmd);
  proc = child_process.exec(cmd, function(err, stdout, stderr) {
    var e;
    if (err) {
      return df.reject(err);
    } else {
      try {
        process.stdout.write(stdout);
        process.stdout.write(stderr);
        return df.resolve(tmpFile);
      } catch (_error) {
        e = _error;
        return df.reject(e);
      }
    }
  });
  proc.stdin.write(mp3);
  proc.stdin.end();
  return df.promise;
};

module.exports = {
  name: 'Voice tts',
  pattern: /!(голос|войс|voice|speak|ня|nya|desu|десу)( [a-z]{2})?(?: (.+))?$/,
  onMsg: function(msg, safe) {
    var chars, lang, nya, ref, txt;
    txt = msg.match[3];
    if (txt == null) {
      if (((ref = msg.reply_to_message) != null ? ref.text : void 0) != null) {
        txt = msg.reply_to_message.text;
      } else {
        logger.info("No text");
        return;
      }
    }
    if (msg.match[2] != null) {
      lang = msg.match[2].trim();
    } else {
      chars = txt.split('');
      if (chars.some(isJap)) {
        lang = 'ja';
      } else if (chars.some(isKor)) {
        lang = 'ko';
      } else if (chars.some(isRus)) {
        lang = 'ru';
      } else {
        lang = 'en';
      }
    }
    nya = msg.match[1].toLowerCase();
    if ((nya === 'ня' || nya === 'nya' || nya === 'desu' || nya === 'десу') && (lang === "ja" || lang === "en" || lang === "ru")) {
      if (nya === 'ня' || nya === 'nya') {
        nya = {
          "ja": "にゃ",
          "en": "nyah",
          "ru": "ня"
        }[lang];
      } else if (nya === 'desu' || nya === 'десу') {
        nya = {
          "ja": "ですう",
          "en": "desoo",
          "ru": "дэсу"
        }[lang];
      } else {
        nya = 'wtf';
      }
      txt = txt.replace(/([\!\?\.\,])/g, " " + nya + "$1");
      if (!/([\!\?\.\,])$/.test(txt)) {
        txt = txt + (" " + nya + "!");
      }
    }
    if (txt.length > 128 && !this.isSudo(msg)) {
      msg.reply("Текст слишком длинный!");
      return;
    }
    logger.info("Voicing: " + txt);
    return safe(googleTts(txt, lang)).then((function(_this) {
      return function(mp3) {
        logger.debug("Got bytes: " + mp3.length);
        return safe(convertMp3ToOpus(mp3)).then(function(opusFile) {
          msg.opusFile = opusFile;
          return safe(_this.sendAudioFromFile(msg, opusFile.name)).then(function() {
            logger.info("Done sending, removing temp file...");
            return opusFile.removeCallback();
          });
        });
      };
    })(this));
  },
  onError: function(msg) {
    if (msg.opusFile != null) {
      opusFile.removeCallback();
    }
    return msg.send("Я сегодня не в голосе.");
  }
};
