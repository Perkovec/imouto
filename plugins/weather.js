// Generated by CoffeeScript 1.10.0
(function() {
  var config, degToCard, icon, lang, logger, misc, moment, offset, timezone, tz, weather;

  lang = 'ru';

  misc = require('../lib/misc');

  config = require('../lib/config');

  logger = require('winston');

  tz = require('coordinate-tz');

  moment = require('moment-timezone');

  moment.locale(lang);

  degToCard = function(deg) {
    var directions;
    directions = ['Север', 'Северо-Северо-Восток', 'Северо-Восток', 'Востоко-Северо-Восток', 'Восток', 'Востоко-Юго-Восток', 'Юго-Восток', 'Юго-Юго-Восток', 'Юг', 'Юго-Юго-Запад', 'Юго-Запад', 'Западо-Юго-Запад', 'Запад', 'Западо-Северо-Запад', 'Северо-Запад', 'Северо-Северо-Запад', 'Север'];
    return directions[(deg / 22.5).toFixed(0)];
  };

  icon = function(type) {
    switch (type) {
      case "01d":
        return "☀️";
      case "01n":
        return "☀";
      case "02d":
        return "🌤";
      case "02n":
        return "🌤";
      case "03d":
        return "☁️";
      case "03n":
        return "☁️";
      case "04d":
        return "☁️";
      case "04n":
        return "☁️";
      case "09d":
        return "🌧";
      case "09n":
        return "🌧";
      case "10d":
        return "🌦";
      case "10n":
        return "🌦";
      case "11d":
        return "🌩";
      case "11n":
        return "🌩";
      case "13d":
        return "🌨";
      case "13n":
        return "🌨";
      case "50d":
        return "🌫";
      case "50n":
        return "🌫";
    }
  };

  timezone = function(lat, lon) {
    return tz.calculate(lat, lon).timezone;
  };

  offset = function(timezone) {
    return function(date) {
      var tzdate;
      tzdate = moment(date);
      return tzdate.tz(timezone);
    };
  };

  weather = function(cityName, lat, lon) {
    var qs;
    qs = {
      units: 'metric',
      lang: lang,
      appid: config.options.weathermap
    };
    if (cityName != null) {
      qs.q = cityName;
    } else {
      qs.lat = lat;
      qs.lon = lon;
    }
    return misc.get('http://api.openweathermap.org/data/2.5/weather', {
      qs: qs,
      json: true
    }).then(function(res) {
      if (res.cod !== 200) {
        throw new Error(res.message);
      }
      return res;
    });
  };

  module.exports = {
    name: 'Weather',
    pattern: /!(weather|погода)(?: (.+))?/,
    isConf: true,
    isAcceptMsg: function(msg) {
      return (msg.location != null) || this.matchPattern(msg, msg.text);
    },
    onMsg: function(msg, safe) {
      var latitude, longitude, ref, res, txt;
      if (msg.location != null) {
        ref = msg.location, latitude = ref.latitude, longitude = ref.longitude;
        res = weather(null, latitude, longitude);
      } else {
        txt = msg.match[2];
        res = weather(txt);
        if (txt == null) {
          return;
        }
      }
      return safe(res).then(function(data) {
        var desc, emoji, obj, sunrise, sunset, type, zone;
        console.log(data);
        type = icon(data['weather'][0]['icon']);
        zone = timezone(data['coord']['lat'], data['coord']['lon']);
        sunrise = sunset = offset(zone);
        emoji = (
          obj = {},
          obj["" + type] = (Math.floor(data['main']['temp_min'])) + " °C / " + (Math.floor(data['main']['temp'])) + " °C / " + (Math.floor(data['main']['temp_max'])) + " °C",
          obj["💦"] = data['main']['humidity'] + "%",
          obj["💨"] = data['wind']['speed'] + " км/ч / " + (degToCard(data['wind']['deg'])),
          obj["🌅"] = "" + (sunrise(data['sys']['sunrise'] * 1000).format('LT')),
          obj["🌄"] = "" + (sunset(data['sys']['sunset'] * 1000).format('LT')),
          obj
        );
        desc = data['name'] + ", " + data['sys']['country'] + " - " + data['weather'][0]['main'] + "\n" + data['weather'][0]['description'];
        Object.keys(emoji).map(function(e) {
          return desc += "\n" + e + ": " + emoji[e];
        });
        return msg.reply(desc);
      });
    },
    onError: function(msg) {
      return msg.reply('Город не найден.');
    }
  };

}).call(this);

//# sourceMappingURL=weather.js.map
